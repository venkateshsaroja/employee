import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios'; // Import axios for making HTTP requests
import Swal from 'sweetalert2';

function Add({ employees = [], setEmployees, setIsAdding }) {
  const [empId, setEmpId] = useState(''); // State for manual empId input
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [salary, setSalary] = useState('');
  const [date, setDate] = useState('');
  const textInput = useRef(null);

  useEffect(() => {
    if (textInput.current) {
      textInput.current.focus();
    }
  }, []);

  const addEmployee = (newEmployee) => {
    setEmployees((prevEmployees) => [...prevEmployees, newEmployee]);
  };

  const handleAdd = (e) => {
    e.preventDefault();
  debugger
    if (!firstName || !lastName || !email || !salary || !date) {
      return Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'All fields are required.',
        showConfirmButton: true,
        timer: 1500,
      });
    }
    const newEmployee = {
      id: 0, // Send 0 as a placeholder if id is auto-generated by the backend
      empId: parseInt(empId, 10), // Ensure empId is a number
      fname: firstName, // Match the API's field name
      lname: lastName,  // Match the API's field name
      email: email,
      salary: parseFloat(salary), // Ensure salary is a number
      bDate: new Date(date).toISOString(), // Convert to ISO 8601 format
    };
  
    console.log('Payload being sent:', newEmployee); // Log the payload for debugging
  
    // Send POST request to the backend
    axios
      .post('https://localhost:7259/api/Employee', newEmployee)
      .then((response) => {
        // Handle successful response
        setEmployees((prevEmployees) => [...prevEmployees, response.data]);
  
        setIsAdding(false);
  
        Swal.fire({
          icon: 'success',
          title: 'Added',
          text: `${firstName} ${lastName}'s data has been added.`,
          showConfirmButton: false,
          timer: 1500,
        });
      })
      .catch((error) => {
        if (error.response) {
          console.error('Error response:', error.response.data);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.response.data.message || 'There was an error adding the employee.',
          });
        } else {
          Swal.fire({
            icon: 'success',
            title: 'Added',
            text: `${firstName} ${lastName}'s data has been added.`,
            showConfirmButton: false,
            timer: 1500,
          });
        }
      });
  };
  

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-md shadow-md">
      <form onSubmit={handleAdd} className="space-y-4">
        <h1 className="text-2xl font-semibold mb-4">Add Employee</h1>

        {/* empId Input */}
        <label htmlFor="empId" className="block text-sm font-medium text-gray-600">
          Employee ID
        </label>
        <input
          id="empId"
          type="text"
          name="empId"
          value={empId}
          onChange={(e) => setEmpId(e.target.value)}
          className="border rounded-md p-2 w-full"
        />

        <label htmlFor="firstName" className="block text-sm font-medium text-gray-600">
          First Name
        </label>
        <input
          id="firstName"
          type="text"
          name="firstName"
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
          className="border rounded-md p-2 w-full"
          ref={textInput}
        />

        <label htmlFor="lastName" className="block text-sm font-medium text-gray-600">
          Last Name
        </label>
        <input
          id="lastName"
          type="text"
          name="lastName"
          value={lastName}
          onChange={(e) => setLastName(e.target.value)}
          className="border rounded-md p-2 w-full"
        />

        <label htmlFor="email" className="block text-sm font-medium text-gray-600">
          Email
        </label>
        <input
          id="email"
          type="email"
          name="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="border rounded-md p-2 w-full"
        />

        <label htmlFor="salary" className="block text-sm font-medium text-gray-600">
          Salary (â‚¹)
        </label>
        <input
          id="salary"
          type="number"
          name="salary"
          value={salary}
          onChange={(e) => setSalary(e.target.value)}
          className="border rounded-md p-2 w-full"
        />

        <label htmlFor="date" className="block text-sm font-medium text-gray-600">
          Date
        </label>
        <input
          id="date"
          type="date"
          name="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          className="border rounded-md p-2 w-full"
        />

        <div className="mt-4 flex space-x-2">
          <input
            type="submit"
            value="Add"
            className="bg-blue-500 text-white rounded-md px-4 py-2 hover:bg-blue-600 cursor-pointer"
          />
          <input
            type="button"
            value="Cancel"
            onClick={() => setIsAdding(false)}
            className="bg-gray-300 text-gray-600 rounded-md px-4 py-2 hover:bg-gray-400 cursor-pointer"
          />
        </div>
      </form>
    </div>
  );
}

export default Add;
